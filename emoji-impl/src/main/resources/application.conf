
akka.kafka {

  consumer {

    kafka-clients {
      # Disable auto-commit by default
      enable.auto.commit = false

      #The value must be set lower than session.timeout.ms, but typically should be set no higher than 1/3 of that value.
      # It can be adjusted even lower to control the expected time for normal rebalances.
      heartbeat.interval.ms: 1500
      session.timeout.ms: 9000
      max.poll.interval.ms: 150000
    }

  }

  producer {

    # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
    # can be defined in this configuration section.
    kafka-clients {
      # The maximum number of unacknowledged requests the client will send on a single connection before
      # blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there
      # is a risk of message re-ordering due to retries (i.e., if retries are enabled).
      # (see http://kafka.apache.org/documentation/#producerconfigs)
      max.in.flight.requests.per.connection = 1
      acks = "all"
      delivery.timeout.ms = 60000
      request.timeout.ms = 15000
    }

  }

}

play.filters.enabled += play.filters.hosts.AllowedHostsFilter
play.filters.enabled += play.filters.cors.CORSFilter

# keyspaces configurations
cassandra-journal.keyspace = emoji_service_journal
cassandra-snapshot-store.keyspace = emoji_service_snapshot
lagom.persistence.read-side.cassandra.keyspace = emoji_service_read_side

cassandra-query-journal.eventual-consistency-delay = 1s
cassandra-journal.replication-factor = 1

cassandra-snapshot-store.replication-factor = 1

lagom.persistence.read-side.cassandra.replication-factor = 1

lagom.persistence.max-number-of-shards = 100

lagom.persistence.passivate-after-idle-timeout = "5s"

lagom.persistence.ask-timeout = "30s"

lagom.broker.kafka.service-name = "kafka_native"



play.modules.enable += pt.timestamp.exercise.EmojiModule
#play.modules.disabled += com.lightbend.lagom.javadsl.persistence.jdbc.JdbcPersistenceModule
lagom.serialization.json.jackson-modules += io.vavr.jackson.datatype.VavrModule


akka {
  #Prefer 'ddata' over 'persistence' to share cluster sharding state for new projects.
  #See https://doc.akka.io/docs/akka/current/cluster-sharding.html#distributed-data-vs-persistence-mode
  cluster.sharding.state-store-mode = ddata

  # Enable supply serializer provided in Akka 2.5.8+ to avoid supply use of Java serialization.
  actor.serialization-bindings {
    "akka.Done" = akka-misc
    "akka.NotUsed"= akka-misc
    "akka.actor.Address" = akka-misc
    "akka.remote.UniqueAddress" = akka-misc
    "java.util.UUID" = lagom-json
    "io.vavr.control.Option" = lagom-json
    "io.vavr.collection.List" = lagom-json
    "play.i18n.Lang" = lagom-json
    "java.util.Optional" = lagom-json
  }



  allow-java-serialization = off
}

# Circuit breakers for calls to other services are configured
# in this section. A child configuration section with the same
# name as the circuit breaker identifier will be used, with fallback
# to the `lagom.circuit-breaker.default` section.
lagom.circuit-breaker {

  # Default configuration that is used if a configuration section
  # with the circuit breaker identifier is not defined.
  default {
    # Possibility to disable a given circuit breaker.
    enabled = on
    enabled = ${?DEV_CIRCUIT_BREAKER_ON_OFF}

    # Number of failures before opening the circuit.
    max-failures = 10

    # Duration of time after which to consider a call a failure.
    call-timeout = 10s

    # Duration of time in open state after which to attempt to close
    # the circuit, by first entering the half-open state.
    reset-timeout = 15s

    # A whitelist of fqcn of Exceptions that the CircuitBreaker
    # should not consider failures. By default all exceptions are
    # considered failures.
    exception-whitelist = [
      "com.lightbend.lagom.javadsl.api.transport.NotFound",         #404
      "com.lightbend.lagom.javadsl.api.transport.PolicyViolation",  #404
      "com.lightbend.lagom.javadsl.api.transport.Forbidden",        #403
      "com.lightbend.lagom.javadsl.api.transport.BadRequest",       #400
      "com.lightbend.lagom.javadsl.api.transport.DeserializationException", #
      "com.lightbend.lagom.javadsl.api.transport.NotAcceptable"     #406,
      "com.lightbend.lagom.javadsl.api.transport.PayloadTooLarge"   #413
    ]
  }
}

lagom.serialization.json.compress-larger-than = 6000

